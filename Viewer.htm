<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Viewer</title>
<style>
  body {
    font-family: Arial, sans-serif;
    margin: 0;
    padding: 20px;
  }
  h1 {
    text-align: center;
    margin-bottom: 20px;
  }
  h3 {
    text-align: center;
    margin-bottom: 0px;
  }
  #controls {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 20px;
  }
  #fileList {
    display: flex;
    flex-direction: column;
    gap: 20px;
  }
  .file-item {
    border: 1px solid #ccc;
    padding: 20px;
    background-color: #f9f9f9;
    border-radius: 5px;
  }
  .file-item h2 {
    margin: 0;
    font-size: 1.2rem;
    color: #333;
  }
  .file-item pre {
    white-space: pre-wrap;
    margin-top: 10px;
    font-size: 14px;
    line-height: 1.4;
    color: #555;
  }
  textarea {
    width: 100%;
    padding: 8px;
    margin-top: 10px;
    border: 1px solid #ccc;
    border-radius: 5px;
    resize: vertical;
  }
  #downloadButton {
    display: block;
    margin: 20px auto;
    padding: 10px 20px;
    background-color: #007bff;
    color: #fff;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    font-size: 1rem;
    transition: background-color 0.3s ease;
  }
  #downloadButton:hover {
    background-color: #0056b3;
  }
</style>
</head>
<body>
  <h1>Viewer</h1>
  <div id="controls">
    <div>
      <label for="fileInput">Select files:</label>
      <input type="file" id="fileInput" multiple accept=".txt">
    </div>
    <div>
      <label for="sortOption">Sort by:</label>
      <select id="sortOption">
        <option value="name">Name</option>
        <option value="number">Number</option>
      </select>
    </div>
  </div>
  
  <div id="fileList"></div>
  <hr>
  <button id="downloadButton">SAVE âˆ‚</button>

  <script>
    const fileInput = document.getElementById('fileInput');
    const sortOption = document.getElementById('sortOption');
    const fileList = document.getElementById('fileList');
    const downloadButton = document.getElementById('downloadButton');
    let textEntries = {};

    fileInput.addEventListener('change', handleFileInputChange);
    sortOption.addEventListener('change', handleSortOptionChange);
    downloadButton.addEventListener('click', handleDownloadClick);

    function handleSortOptionChange() {
      updateSort();
    }

    function updateSort() {
      const files = Array.from(fileList.querySelectorAll('.file-item'));
      const option = sortOption.value;
      if (option === 'name') {
        files.sort((a, b) => a.querySelector('h2').textContent.localeCompare(b.querySelector('h2').textContent));
      } else if (option === 'number') {
        files.sort((a, b) => {
          const nameA = parseInt(a.querySelector('h2').textContent);
          const nameB = parseInt(b.querySelector('h2').textContent);
          return nameA - nameB;
        });
      }
      fileList.innerHTML = '';
      files.forEach(file => fileList.appendChild(file));
    }

    function handleDownloadClick() {
      const textData = [];
      const textareas = fileList.querySelectorAll('textarea');
      textareas.forEach(textarea => {
        const fileId = textarea.getAttribute('data-file-id');
        const text = textarea.value.trim(); // Remove leading and trailing spaces
        if (text !== '') {
          textData.push(text);
        }
        textEntries[fileId] = text;
      });
      
      const textBlob = new Blob([textData.join('\n')], { type: 'text/plain' });
      const downloadLink = document.createElement('a');
      downloadLink.href = URL.createObjectURL(textBlob);
      downloadLink.download = 'text_entries.txt';
      downloadLink.click();
    }

    function handleFileInputChange(event) {
      fileList.innerHTML = '';
      textEntries = {};
      const files = event.target.files;
      for (const file of files) {
        if (file.type === 'text/plain') {
          const reader = new FileReader();
          reader.onload = function (e) {
            const fileContent = e.target.result;
            const fileId = Date.now(); // Generate a unique ID
            textEntries[fileId] = ''; // Initialize the text entry
            const fileDiv = document.createElement('div');
            fileDiv.classList.add('file-item');
            fileDiv.innerHTML = `
              <h2>${file.name}</h2>
              <pre>${highlightLinks(fileContent)}</pre>
              <textarea data-file-id="${fileId}" rows="1" cols="30" placeholder="DOI: " style="resize: none;"></textarea>
            `;
            fileList.appendChild(fileDiv);
            updateSort();
          };
          reader.readAsText(file);
        }
      }
    }

    function highlightLinks(text) {
      // Regular expression to find DOIs
      const doiRegex = /\b(10\.\d{4,}(?:\.\d+)*\/\S+)\b/g;

      return text.replace(doiRegex, '<a href="https://doi.org/$1" target="_blank">$1</a>');
    }
  </script>
</body>
</html>